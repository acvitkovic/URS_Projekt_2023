
URS_Projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000222  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000222  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ba3  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000762  00000000  00000000  00000f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057b  00000000  00000000  000016bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  00001c38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003df  00000000  00000000  00001d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000538  00000000  00000000  0000217b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000026b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
  7a:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  82:	97 9a       	sbi	0x12, 7	; 18
  84:	00 c0       	rjmp	.+0      	; 0x86 <toggle_e+0x4>
  86:	97 98       	cbi	0x12, 7	; 18
  88:	08 95       	ret

0000008a <lcd_write>:
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	d8 2f       	mov	r29, r24
  90:	66 23       	and	r22, r22
  92:	11 f0       	breq	.+4      	; 0x98 <lcd_write+0xe>
  94:	95 9a       	sbi	0x12, 5	; 18
  96:	01 c0       	rjmp	.+2      	; 0x9a <lcd_write+0x10>
  98:	95 98       	cbi	0x12, 5	; 18
  9a:	96 98       	cbi	0x12, 6	; 18
  9c:	81 b3       	in	r24, 0x11	; 17
  9e:	8f 60       	ori	r24, 0x0F	; 15
  a0:	81 bb       	out	0x11, r24	; 17
  a2:	c2 b3       	in	r28, 0x12	; 18
  a4:	c0 7f       	andi	r28, 0xF0	; 240
  a6:	8d 2f       	mov	r24, r29
  a8:	82 95       	swap	r24
  aa:	8f 70       	andi	r24, 0x0F	; 15
  ac:	8c 2b       	or	r24, r28
  ae:	82 bb       	out	0x12, r24	; 18
  b0:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  b4:	df 70       	andi	r29, 0x0F	; 15
  b6:	dc 2b       	or	r29, r28
  b8:	d2 bb       	out	0x12, r29	; 18
  ba:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  be:	cf 60       	ori	r28, 0x0F	; 15
  c0:	c2 bb       	out	0x12, r28	; 18
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <lcd_read>:
  c8:	88 23       	and	r24, r24
  ca:	11 f0       	breq	.+4      	; 0xd0 <lcd_read+0x8>
  cc:	95 9a       	sbi	0x12, 5	; 18
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <lcd_read+0xa>
  d0:	95 98       	cbi	0x12, 5	; 18
  d2:	96 9a       	sbi	0x12, 6	; 18
  d4:	81 b3       	in	r24, 0x11	; 17
  d6:	80 7f       	andi	r24, 0xF0	; 240
  d8:	81 bb       	out	0x11, r24	; 17
  da:	97 9a       	sbi	0x12, 7	; 18
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcd_read+0x16>
  de:	90 b3       	in	r25, 0x10	; 16
  e0:	97 98       	cbi	0x12, 7	; 18
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_read+0x1c>
  e4:	97 9a       	sbi	0x12, 7	; 18
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_read+0x20>
  e8:	20 b3       	in	r18, 0x10	; 16
  ea:	2f 70       	andi	r18, 0x0F	; 15
  ec:	89 2f       	mov	r24, r25
  ee:	82 95       	swap	r24
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	97 98       	cbi	0x12, 7	; 18
  f4:	82 2b       	or	r24, r18
  f6:	08 95       	ret

000000f8 <lcd_waitbusy>:
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_read>
  fe:	88 23       	and	r24, r24
 100:	dc f3       	brlt	.-10     	; 0xf8 <lcd_waitbusy>
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_waitbusy+0xe>
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_read>
 110:	08 95       	ret

00000112 <lcd_command>:
 112:	cf 93       	push	r28
 114:	c8 2f       	mov	r28, r24
 116:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_waitbusy>
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	8c 2f       	mov	r24, r28
 11e:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <lcd_clrscr>:
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
 12c:	08 95       	ret

0000012e <lcd_putc>:
 12e:	cf 93       	push	r28
 130:	c8 2f       	mov	r28, r24
 132:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_waitbusy>
 136:	ca 30       	cpi	r28, 0x0A	; 10
 138:	49 f4       	brne	.+18     	; 0x14c <lcd_putc+0x1e>
 13a:	80 34       	cpi	r24, 0x40	; 64
 13c:	10 f0       	brcs	.+4      	; 0x142 <lcd_putc+0x14>
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	01 c0       	rjmp	.+2      	; 0x144 <lcd_putc+0x16>
 142:	80 e4       	ldi	r24, 0x40	; 64
 144:	80 58       	subi	r24, 0x80	; 128
 146:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
 14a:	04 c0       	rjmp	.+8      	; 0x154 <lcd_putc+0x26>
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	8c 2f       	mov	r24, r28
 150:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <lcd_puts>:
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	ec 01       	movw	r28, r24
 15e:	21 96       	adiw	r28, 0x01	; 1
 160:	fc 01       	movw	r30, r24
 162:	80 81       	ld	r24, Z
 164:	88 23       	and	r24, r24
 166:	29 f0       	breq	.+10     	; 0x172 <lcd_puts+0x1a>
 168:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_putc>
 16c:	89 91       	ld	r24, Y+
 16e:	81 11       	cpse	r24, r1
 170:	fb cf       	rjmp	.-10     	; 0x168 <lcd_puts+0x10>
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	18 2f       	mov	r17, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 180:	81 b3       	in	r24, 0x11	; 17
 182:	8f 60       	ori	r24, 0x0F	; 15
 184:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 186:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 188:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 18a:	8f 9a       	sbi	0x11, 7	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 18c:	80 e3       	ldi	r24, 0x30	; 48
 18e:	93 e7       	ldi	r25, 0x73	; 115
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_init+0x18>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 194:	91 9a       	sbi	0x12, 1	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 196:	90 9a       	sbi	0x12, 0	; 18
    lcd_e_toggle();
 198:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 19c:	80 ef       	ldi	r24, 0xF0	; 240
 19e:	93 e2       	ldi	r25, 0x23	; 35
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_init+0x28>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1a4:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1a8:	c5 e7       	ldi	r28, 0x75	; 117
 1aa:	d0 e0       	ldi	r29, 0x00	; 0
 1ac:	ce 01       	movw	r24, r28
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_init+0x36>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1b2:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b6:	ce 01       	movw	r24, r28
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_init+0x40>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1bc:	90 98       	cbi	0x12, 0	; 18
    lcd_e_toggle();
 1be:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1c2:	21 97       	sbiw	r28, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_init+0x4a>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1c6:	88 e2       	ldi	r24, 0x28	; 40
 1c8:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1cc:	88 e0       	ldi	r24, 0x08	; 8
 1ce:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 1d2:	0e 94 93 00 	call	0x126	; 0x126 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1d6:	86 e0       	ldi	r24, 0x06	; 6
 1d8:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 1dc:	81 2f       	mov	r24, r17
 1de:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>

}/* lcd_init */
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	08 95       	ret

000001ea <main>:
#include "lcd.h"

int main(void)
{

   	DDRD = _BV(4);
 1ea:	80 e1       	ldi	r24, 0x10	; 16
 1ec:	81 bb       	out	0x11, r24	; 17
   	DDRC = 0xf0;
 1ee:	80 ef       	ldi	r24, 0xF0	; 240
 1f0:	84 bb       	out	0x14, r24	; 20
   	PORTC = 0x0f;
 1f2:	8f e0       	ldi	r24, 0x0F	; 15
 1f4:	85 bb       	out	0x15, r24	; 21

   	TCCR1A = _BV(COM1B1) | _BV(WGM10);
 1f6:	81 e2       	ldi	r24, 0x21	; 33
 1f8:	8f bd       	out	0x2f, r24	; 47
   	TCCR1B = _BV(WGM12) | _BV(CS11);
 1fa:	8a e0       	ldi	r24, 0x0A	; 10
 1fc:	8e bd       	out	0x2e, r24	; 46
   	OCR1B = 128;
 1fe:	80 e8       	ldi	r24, 0x80	; 128
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	99 bd       	out	0x29, r25	; 41
 204:	88 bd       	out	0x28, r24	; 40

   	lcd_init(LCD_DISP_ON);
 206:	8c e0       	ldi	r24, 0x0C	; 12
 208:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_init>
   	lcd_clrscr();
 20c:	0e 94 93 00 	call	0x126	; 0x126 <lcd_clrscr>
   	
   	lcd_puts("Hello World");
 210:	80 e6       	ldi	r24, 0x60	; 96
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_puts>
}
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	08 95       	ret

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
