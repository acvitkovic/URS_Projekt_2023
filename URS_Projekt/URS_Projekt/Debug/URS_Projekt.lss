
URS_Projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  000005a8  0000061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014a5  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009cf  00000000  00000000  00001c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009b8  00000000  00000000  0000265c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f8  00000000  00000000  00003014  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c8  00000000  00000000  0000320c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b1d  00000000  00000000  000036d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000041f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3e       	cpi	r26, 0xE6	; 230
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4e 02 	call	0x49c	; 0x49c <main>
  7a:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <writeADCtoLCD>:
#include <stdlib.h>


#include "lcd.h"

void writeADCtoLCD(uint16_t adcvalue){
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	60 97       	sbiw	r28, 0x10	; 16
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  96:	4a e0       	ldi	r20, 0x0A	; 10
  98:	be 01       	movw	r22, r28
  9a:	6f 5f       	subi	r22, 0xFF	; 255
  9c:	7f 4f       	sbci	r23, 0xFF	; 255
  9e:	0e 94 9d 02 	call	0x53a	; 0x53a <__itoa_ncheck>
	char adcstring[16];
	itoa(adcvalue, adcstring, 10);
	lcd_clrscr();
  a2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_clrscr>
	lcd_puts(adcstring);
  a6:	ce 01       	movw	r24, r28
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>
}
  ae:	60 96       	adiw	r28, 0x10	; 16
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
  ba:	df 91       	pop	r29
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <game1>:

int game1(){
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
	// this game uses muscle sensor for 2 players competing
	lcd_clrscr();
  cc:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_clrscr>
	lcd_puts("Muscle Test");
  d0:	80 e6       	ldi	r24, 0x60	; 96
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	8f e7       	ldi	r24, 0x7F	; 127
  dc:	90 e7       	ldi	r25, 0x70	; 112
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <game1+0x1e>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <game1+0x28>
  e8:	00 00       	nop
	int player2 = 100;
	
	uint16_t max1 = 0;
	uint16_t max2 = 0;
	
	ADMUX = _BV(REFS0);
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	87 b9       	out	0x07, r24	; 7
	ADCSRA = _BV(ADEN) | _BV(ADPS1) | _BV(ADPS2);
  ee:	86 e8       	ldi	r24, 0x86	; 134
  f0:	86 b9       	out	0x06, r24	; 6
	
	lcd_clrscr();
  f2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_clrscr>
	lcd_puts("Player 1 Ready");
  f6:	8c e6       	ldi	r24, 0x6C	; 108
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	90 ee       	ldi	r25, 0xE0	; 224
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <game1+0x44>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <game1+0x4e>
 10e:	00 00       	nop
 110:	c4 e6       	ldi	r28, 0x64	; 100
 112:	d0 e0       	ldi	r29, 0x00	; 0
	
	int score = 0;
	int player1 = 100;
	int player2 = 100;
	
	uint16_t max1 = 0;
 114:	00 e0       	ldi	r16, 0x00	; 0
 116:	10 e0       	ldi	r17, 0x00	; 0
	lcd_puts("Player 1 Ready");
	_delay_ms(10000);
	
	while(player1){
		player1--;
		ADCSRA |= _BV(ADSC);
 118:	36 9a       	sbi	0x06, 6	; 6
		while(!(ADCSRA & _BV(ADIF)));
 11a:	34 9b       	sbis	0x06, 4	; 6
 11c:	fe cf       	rjmp	.-4      	; 0x11a <game1+0x5a>
		if(ADC > max1){
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	95 b1       	in	r25, 0x05	; 5
 122:	08 17       	cp	r16, r24
 124:	19 07       	cpc	r17, r25
 126:	10 f4       	brcc	.+4      	; 0x12c <game1+0x6c>
			max1 = ADC;
 128:	04 b1       	in	r16, 0x04	; 4
 12a:	15 b1       	in	r17, 0x05	; 5
		}
		writeADCtoLCD(ADC);
 12c:	84 b1       	in	r24, 0x04	; 4
 12e:	95 b1       	in	r25, 0x05	; 5
 130:	0e 94 41 00 	call	0x82	; 0x82 <writeADCtoLCD>
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	8f e3       	ldi	r24, 0x3F	; 63
 138:	92 e0       	ldi	r25, 0x02	; 2
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <game1+0x7a>
 142:	00 c0       	rjmp	.+0      	; 0x144 <game1+0x84>
 144:	00 00       	nop
 146:	21 97       	sbiw	r28, 0x01	; 1
	
	lcd_clrscr();
	lcd_puts("Player 1 Ready");
	_delay_ms(10000);
	
	while(player1){
 148:	39 f7       	brne	.-50     	; 0x118 <game1+0x58>
		}
		writeADCtoLCD(ADC);
		_delay_ms(100);
	}
	
	lcd_clrscr();
 14a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_clrscr>
	lcd_puts("Player 2 Ready");
 14e:	8b e7       	ldi	r24, 0x7B	; 123
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	90 ee       	ldi	r25, 0xE0	; 224
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <game1+0x9c>
 164:	00 c0       	rjmp	.+0      	; 0x166 <game1+0xa6>
 166:	00 00       	nop
 168:	c4 e6       	ldi	r28, 0x64	; 100
 16a:	d0 e0       	ldi	r29, 0x00	; 0
	int score = 0;
	int player1 = 100;
	int player2 = 100;
	
	uint16_t max1 = 0;
	uint16_t max2 = 0;
 16c:	e1 2c       	mov	r14, r1
 16e:	f1 2c       	mov	r15, r1
	lcd_puts("Player 2 Ready");
	_delay_ms(10000);
	
	while(player2){
		player2--;
		ADCSRA |= _BV(ADSC);
 170:	36 9a       	sbi	0x06, 6	; 6
		while(!(ADCSRA & _BV(ADIF)));
 172:	34 9b       	sbis	0x06, 4	; 6
 174:	fe cf       	rjmp	.-4      	; 0x172 <game1+0xb2>
		if(ADC > max2){
 176:	84 b1       	in	r24, 0x04	; 4
 178:	95 b1       	in	r25, 0x05	; 5
 17a:	e8 16       	cp	r14, r24
 17c:	f9 06       	cpc	r15, r25
 17e:	10 f4       	brcc	.+4      	; 0x184 <game1+0xc4>
			max2 = ADC;
 180:	e4 b0       	in	r14, 0x04	; 4
 182:	f5 b0       	in	r15, 0x05	; 5
		}
		writeADCtoLCD(ADC);
 184:	84 b1       	in	r24, 0x04	; 4
 186:	95 b1       	in	r25, 0x05	; 5
 188:	0e 94 41 00 	call	0x82	; 0x82 <writeADCtoLCD>
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	8f e3       	ldi	r24, 0x3F	; 63
 190:	92 e0       	ldi	r25, 0x02	; 2
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <game1+0xd2>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <game1+0xdc>
 19c:	00 00       	nop
 19e:	21 97       	sbiw	r28, 0x01	; 1
	
	lcd_clrscr();
	lcd_puts("Player 2 Ready");
	_delay_ms(10000);
	
	while(player2){
 1a0:	39 f7       	brne	.-50     	; 0x170 <game1+0xb0>
		}
		writeADCtoLCD(ADC);
		_delay_ms(100);
	}
	
	lcd_clrscr();
 1a2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_clrscr>
	
	if(max1 > max2){
 1a6:	e0 16       	cp	r14, r16
 1a8:	f1 06       	cpc	r15, r17
 1aa:	38 f4       	brcc	.+14     	; 0x1ba <game1+0xfa>
		score++;
		lcd_puts("Point for P1");
 1ac:	8a e8       	ldi	r24, 0x8A	; 138
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>
	}
	
	lcd_clrscr();
	
	if(max1 > max2){
		score++;
 1b4:	c1 e0       	ldi	r28, 0x01	; 1
 1b6:	d0 e0       	ldi	r29, 0x00	; 0
 1b8:	10 c0       	rjmp	.+32     	; 0x1da <game1+0x11a>
		lcd_puts("Point for P1");
		}else if(max2 > max1){
 1ba:	0e 15       	cp	r16, r14
 1bc:	1f 05       	cpc	r17, r15
 1be:	38 f4       	brcc	.+14     	; 0x1ce <game1+0x10e>
		score--;
		lcd_puts("Point for P2");
 1c0:	87 e9       	ldi	r24, 0x97	; 151
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>
	
	if(max1 > max2){
		score++;
		lcd_puts("Point for P1");
		}else if(max2 > max1){
		score--;
 1c8:	cf ef       	ldi	r28, 0xFF	; 255
 1ca:	df ef       	ldi	r29, 0xFF	; 255
 1cc:	06 c0       	rjmp	.+12     	; 0x1da <game1+0x11a>
		lcd_puts("Point for P2");
		}else{
		lcd_puts("No points");
 1ce:	84 ea       	ldi	r24, 0xA4	; 164
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>
	// this game uses muscle sensor for 2 players competing
	lcd_clrscr();
	lcd_puts("Muscle Test");
	_delay_ms(5000);
	
	int score = 0;
 1d6:	c0 e0       	ldi	r28, 0x00	; 0
 1d8:	d0 e0       	ldi	r29, 0x00	; 0
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	9c e2       	ldi	r25, 0x2C	; 44
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <game1+0x120>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <game1+0x12a>
 1ea:	00 00       	nop
		}else{
		lcd_puts("No points");
	}
	
	_delay_ms(2000);
	lcd_clrscr();
 1ec:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_clrscr>
	lcd_puts("Choose game");
 1f0:	8e ea       	ldi	r24, 0xAE	; 174
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>
	
	
	ADCSRA = 0x00;
 1f8:	16 b8       	out	0x06, r1	; 6
	
	
	return score;
}
 1fa:	ce 01       	movw	r24, r28
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	ff 90       	pop	r15
 206:	ef 90       	pop	r14
 208:	08 95       	ret

0000020a <game2>:

int game2(){
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
	int score = 0;
	
	lcd_clrscr();
 216:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_clrscr>
	lcd_puts("Sound Test");
 21a:	8a eb       	ldi	r24, 0xBA	; 186
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>
 222:	2f ef       	ldi	r18, 0xFF	; 255
 224:	8f e7       	ldi	r24, 0x7F	; 127
 226:	90 e7       	ldi	r25, 0x70	; 112
 228:	21 50       	subi	r18, 0x01	; 1
 22a:	80 40       	sbci	r24, 0x00	; 0
 22c:	90 40       	sbci	r25, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <game2+0x1e>
 230:	00 c0       	rjmp	.+0      	; 0x232 <game2+0x28>
 232:	00 00       	nop
	
	uint16_t count1 = 0;
	uint16_t count2 = 0;

	
	lcd_clrscr();
 234:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_clrscr>
	lcd_puts("Player 1 Ready");
 238:	8c e6       	ldi	r24, 0x6C	; 108
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>
 240:	2f ef       	ldi	r18, 0xFF	; 255
 242:	8f e7       	ldi	r24, 0x7F	; 127
 244:	90 e7       	ldi	r25, 0x70	; 112
 246:	21 50       	subi	r18, 0x01	; 1
 248:	80 40       	sbci	r24, 0x00	; 0
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <game2+0x3c>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <game2+0x46>
 250:	00 00       	nop
 252:	c0 e0       	ldi	r28, 0x00	; 0
 254:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(5000);
	
	uint32_t player1 = 2000;
	uint32_t player2 = 2000;
	
	uint16_t count1 = 0;
 256:	e1 2c       	mov	r14, r1
 258:	f1 2c       	mov	r15, r1
	lcd_puts("Player 1 Ready");
	_delay_ms(5000);
	
	while(player1){
		player1--;
		if(bit_is_clear(PINB, 7)){
 25a:	b7 99       	sbic	0x16, 7	; 22
 25c:	03 c0       	rjmp	.+6      	; 0x264 <game2+0x5a>
			count1++;
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	e2 1a       	sub	r14, r18
 262:	f2 0a       	sbc	r15, r18

		}
		lcd_clrscr();
 264:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_clrscr>
 268:	21 96       	adiw	r28, 0x01	; 1
	
	lcd_clrscr();
	lcd_puts("Player 1 Ready");
	_delay_ms(5000);
	
	while(player1){
 26a:	c0 3d       	cpi	r28, 0xD0	; 208
 26c:	87 e0       	ldi	r24, 0x07	; 7
 26e:	d8 07       	cpc	r29, r24
 270:	a1 f7       	brne	.-24     	; 0x25a <game2+0x50>
 272:	9f ef       	ldi	r25, 0xFF	; 255
 274:	2f e7       	ldi	r18, 0x7F	; 127
 276:	83 e4       	ldi	r24, 0x43	; 67
 278:	91 50       	subi	r25, 0x01	; 1
 27a:	20 40       	sbci	r18, 0x00	; 0
 27c:	80 40       	sbci	r24, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <game2+0x6e>
 280:	00 c0       	rjmp	.+0      	; 0x282 <game2+0x78>
 282:	00 00       	nop
		}
		lcd_clrscr();
		
	}
	_delay_ms(3000);
	lcd_clrscr();
 284:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_clrscr>
	lcd_puts("Player 2 Ready");
 288:	8b e7       	ldi	r24, 0x7B	; 123
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>
 290:	9f ef       	ldi	r25, 0xFF	; 255
 292:	2f e7       	ldi	r18, 0x7F	; 127
 294:	80 e7       	ldi	r24, 0x70	; 112
 296:	91 50       	subi	r25, 0x01	; 1
 298:	20 40       	sbci	r18, 0x00	; 0
 29a:	80 40       	sbci	r24, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <game2+0x8c>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <game2+0x96>
 2a0:	00 00       	nop
 2a2:	c0 e0       	ldi	r28, 0x00	; 0
 2a4:	d0 e0       	ldi	r29, 0x00	; 0
	
	uint32_t player1 = 2000;
	uint32_t player2 = 2000;
	
	uint16_t count1 = 0;
	uint16_t count2 = 0;
 2a6:	00 e0       	ldi	r16, 0x00	; 0
 2a8:	10 e0       	ldi	r17, 0x00	; 0
	lcd_puts("Player 2 Ready");
	_delay_ms(5000);
	
	while(player2){
		player2--;
		if(bit_is_clear(PINB, 7)){
 2aa:	b7 99       	sbic	0x16, 7	; 22
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <game2+0xa8>
			count2++;
 2ae:	0f 5f       	subi	r16, 0xFF	; 255
 2b0:	1f 4f       	sbci	r17, 0xFF	; 255
			
		}
		lcd_clrscr();
 2b2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_clrscr>
 2b6:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(3000);
	lcd_clrscr();
	lcd_puts("Player 2 Ready");
	_delay_ms(5000);
	
	while(player2){
 2b8:	c0 3d       	cpi	r28, 0xD0	; 208
 2ba:	97 e0       	ldi	r25, 0x07	; 7
 2bc:	d9 07       	cpc	r29, r25
 2be:	a9 f7       	brne	.-22     	; 0x2aa <game2+0xa0>
 2c0:	2f ef       	ldi	r18, 0xFF	; 255
 2c2:	8f e7       	ldi	r24, 0x7F	; 127
 2c4:	93 e4       	ldi	r25, 0x43	; 67
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <game2+0xbc>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <game2+0xc6>
 2d0:	00 00       	nop
		lcd_clrscr();
	
	}
	_delay_ms(3000);
	
	if(count1 > count2){
 2d2:	0e 15       	cp	r16, r14
 2d4:	1f 05       	cpc	r17, r15
 2d6:	38 f4       	brcc	.+14     	; 0x2e6 <game2+0xdc>
		score++;
		lcd_puts("Point for P1");
 2d8:	8a e8       	ldi	r24, 0x8A	; 138
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>
	
	}
	_delay_ms(3000);
	
	if(count1 > count2){
		score++;
 2e0:	c1 e0       	ldi	r28, 0x01	; 1
 2e2:	d0 e0       	ldi	r29, 0x00	; 0
 2e4:	10 c0       	rjmp	.+32     	; 0x306 <game2+0xfc>
		lcd_puts("Point for P1");
		}else if(count2 > count1){
 2e6:	e0 16       	cp	r14, r16
 2e8:	f1 06       	cpc	r15, r17
 2ea:	38 f4       	brcc	.+14     	; 0x2fa <game2+0xf0>
		score--;
		lcd_puts("Point for P2");
 2ec:	87 e9       	ldi	r24, 0x97	; 151
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>
	
	if(count1 > count2){
		score++;
		lcd_puts("Point for P1");
		}else if(count2 > count1){
		score--;
 2f4:	cf ef       	ldi	r28, 0xFF	; 255
 2f6:	df ef       	ldi	r29, 0xFF	; 255
 2f8:	06 c0       	rjmp	.+12     	; 0x306 <game2+0xfc>
		lcd_puts("Point for P2");
		}else{
		lcd_puts("No points");
 2fa:	84 ea       	ldi	r24, 0xA4	; 164
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>
	
	return score;
}

int game2(){
	int score = 0;
 302:	c0 e0       	ldi	r28, 0x00	; 0
 304:	d0 e0       	ldi	r29, 0x00	; 0
 306:	2f ef       	ldi	r18, 0xFF	; 255
 308:	8f ef       	ldi	r24, 0xFF	; 255
 30a:	9c e2       	ldi	r25, 0x2C	; 44
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	80 40       	sbci	r24, 0x00	; 0
 310:	90 40       	sbci	r25, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <game2+0x102>
 314:	00 c0       	rjmp	.+0      	; 0x316 <game2+0x10c>
 316:	00 00       	nop
		}else{
		lcd_puts("No points");
	}
	
	_delay_ms(2000);
	lcd_clrscr();
 318:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_clrscr>
	lcd_puts("Choose game");
 31c:	8e ea       	ldi	r24, 0xAE	; 174
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>

	return score;
}
 324:	ce 01       	movw	r24, r28
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	ff 90       	pop	r15
 330:	ef 90       	pop	r14
 332:	08 95       	ret

00000334 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 334:	97 9a       	sbi	0x12, 7	; 18
 336:	00 c0       	rjmp	.+0      	; 0x338 <toggle_e+0x4>
 338:	97 98       	cbi	0x12, 7	; 18
 33a:	08 95       	ret

0000033c <lcd_write>:
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	d8 2f       	mov	r29, r24
 342:	66 23       	and	r22, r22
 344:	11 f0       	breq	.+4      	; 0x34a <lcd_write+0xe>
 346:	95 9a       	sbi	0x12, 5	; 18
 348:	01 c0       	rjmp	.+2      	; 0x34c <lcd_write+0x10>
 34a:	95 98       	cbi	0x12, 5	; 18
 34c:	96 98       	cbi	0x12, 6	; 18
 34e:	81 b3       	in	r24, 0x11	; 17
 350:	8f 60       	ori	r24, 0x0F	; 15
 352:	81 bb       	out	0x11, r24	; 17
 354:	c2 b3       	in	r28, 0x12	; 18
 356:	c0 7f       	andi	r28, 0xF0	; 240
 358:	8d 2f       	mov	r24, r29
 35a:	82 95       	swap	r24
 35c:	8f 70       	andi	r24, 0x0F	; 15
 35e:	8c 2b       	or	r24, r28
 360:	82 bb       	out	0x12, r24	; 18
 362:	0e 94 9a 01 	call	0x334	; 0x334 <toggle_e>
 366:	df 70       	andi	r29, 0x0F	; 15
 368:	dc 2b       	or	r29, r28
 36a:	d2 bb       	out	0x12, r29	; 18
 36c:	0e 94 9a 01 	call	0x334	; 0x334 <toggle_e>
 370:	cf 60       	ori	r28, 0x0F	; 15
 372:	c2 bb       	out	0x12, r28	; 18
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	08 95       	ret

0000037a <lcd_read>:
 37a:	88 23       	and	r24, r24
 37c:	11 f0       	breq	.+4      	; 0x382 <lcd_read+0x8>
 37e:	95 9a       	sbi	0x12, 5	; 18
 380:	01 c0       	rjmp	.+2      	; 0x384 <lcd_read+0xa>
 382:	95 98       	cbi	0x12, 5	; 18
 384:	96 9a       	sbi	0x12, 6	; 18
 386:	81 b3       	in	r24, 0x11	; 17
 388:	80 7f       	andi	r24, 0xF0	; 240
 38a:	81 bb       	out	0x11, r24	; 17
 38c:	97 9a       	sbi	0x12, 7	; 18
 38e:	00 c0       	rjmp	.+0      	; 0x390 <lcd_read+0x16>
 390:	90 b3       	in	r25, 0x10	; 16
 392:	97 98       	cbi	0x12, 7	; 18
 394:	00 c0       	rjmp	.+0      	; 0x396 <lcd_read+0x1c>
 396:	97 9a       	sbi	0x12, 7	; 18
 398:	00 c0       	rjmp	.+0      	; 0x39a <lcd_read+0x20>
 39a:	20 b3       	in	r18, 0x10	; 16
 39c:	2f 70       	andi	r18, 0x0F	; 15
 39e:	89 2f       	mov	r24, r25
 3a0:	82 95       	swap	r24
 3a2:	80 7f       	andi	r24, 0xF0	; 240
 3a4:	97 98       	cbi	0x12, 7	; 18
 3a6:	82 2b       	or	r24, r18
 3a8:	08 95       	ret

000003aa <lcd_waitbusy>:
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_read>
 3b0:	88 23       	and	r24, r24
 3b2:	dc f3       	brlt	.-10     	; 0x3aa <lcd_waitbusy>
 3b4:	83 e0       	ldi	r24, 0x03	; 3
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <lcd_waitbusy+0xe>
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_read>
 3c2:	08 95       	ret

000003c4 <lcd_command>:
 3c4:	cf 93       	push	r28
 3c6:	c8 2f       	mov	r28, r24
 3c8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <lcd_waitbusy>
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	8c 2f       	mov	r24, r28
 3d0:	0e 94 9e 01 	call	0x33c	; 0x33c <lcd_write>
 3d4:	cf 91       	pop	r28
 3d6:	08 95       	ret

000003d8 <lcd_clrscr>:
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_command>
 3de:	08 95       	ret

000003e0 <lcd_putc>:
 3e0:	cf 93       	push	r28
 3e2:	c8 2f       	mov	r28, r24
 3e4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <lcd_waitbusy>
 3e8:	ca 30       	cpi	r28, 0x0A	; 10
 3ea:	49 f4       	brne	.+18     	; 0x3fe <lcd_putc+0x1e>
 3ec:	80 34       	cpi	r24, 0x40	; 64
 3ee:	10 f0       	brcs	.+4      	; 0x3f4 <lcd_putc+0x14>
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <lcd_putc+0x16>
 3f4:	80 e4       	ldi	r24, 0x40	; 64
 3f6:	80 58       	subi	r24, 0x80	; 128
 3f8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_command>
 3fc:	04 c0       	rjmp	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fe:	61 e0       	ldi	r22, 0x01	; 1
 400:	8c 2f       	mov	r24, r28
 402:	0e 94 9e 01 	call	0x33c	; 0x33c <lcd_write>
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <lcd_puts>:
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	ec 01       	movw	r28, r24
 410:	21 96       	adiw	r28, 0x01	; 1
 412:	fc 01       	movw	r30, r24
 414:	80 81       	ld	r24, Z
 416:	88 23       	and	r24, r24
 418:	29 f0       	breq	.+10     	; 0x424 <lcd_puts+0x1a>
 41a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_putc>
 41e:	89 91       	ld	r24, Y+
 420:	81 11       	cpse	r24, r1
 422:	fb cf       	rjmp	.-10     	; 0x41a <lcd_puts+0x10>
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 42a:	1f 93       	push	r17
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	18 2f       	mov	r17, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 432:	81 b3       	in	r24, 0x11	; 17
 434:	8f 60       	ori	r24, 0x0F	; 15
 436:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 438:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 43a:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 43c:	8f 9a       	sbi	0x11, 7	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 43e:	80 e3       	ldi	r24, 0x30	; 48
 440:	93 e7       	ldi	r25, 0x73	; 115
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <lcd_init+0x18>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 446:	91 9a       	sbi	0x12, 1	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 448:	90 9a       	sbi	0x12, 0	; 18
    lcd_e_toggle();
 44a:	0e 94 9a 01 	call	0x334	; 0x334 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 44e:	80 ef       	ldi	r24, 0xF0	; 240
 450:	93 e2       	ldi	r25, 0x23	; 35
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <lcd_init+0x28>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 456:	0e 94 9a 01 	call	0x334	; 0x334 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 45a:	c5 e7       	ldi	r28, 0x75	; 117
 45c:	d0 e0       	ldi	r29, 0x00	; 0
 45e:	ce 01       	movw	r24, r28
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <lcd_init+0x36>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 464:	0e 94 9a 01 	call	0x334	; 0x334 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 468:	ce 01       	movw	r24, r28
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <lcd_init+0x40>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 46e:	90 98       	cbi	0x12, 0	; 18
    lcd_e_toggle();
 470:	0e 94 9a 01 	call	0x334	; 0x334 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 474:	21 97       	sbiw	r28, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <lcd_init+0x4a>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 478:	88 e2       	ldi	r24, 0x28	; 40
 47a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 47e:	88 e0       	ldi	r24, 0x08	; 8
 480:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 484:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 488:	86 e0       	ldi	r24, 0x06	; 6
 48a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 48e:	81 2f       	mov	r24, r17
 490:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_command>

}/* lcd_init */
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	1f 91       	pop	r17
 49a:	08 95       	ret

0000049c <main>:

#include "game.h"

int main(void)
{
	DDRB = 0x00;
 49c:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x0f;
 49e:	8f e0       	ldi	r24, 0x0F	; 15
 4a0:	88 bb       	out	0x18, r24	; 24
	
   	DDRD = _BV(4);
 4a2:	80 e1       	ldi	r24, 0x10	; 16
 4a4:	81 bb       	out	0x11, r24	; 17

   	TCCR1A = _BV(COM1B1) | _BV(WGM10);
 4a6:	81 e2       	ldi	r24, 0x21	; 33
 4a8:	8f bd       	out	0x2f, r24	; 47
   	TCCR1B = _BV(WGM12) | _BV(CS11);
 4aa:	8a e0       	ldi	r24, 0x0A	; 10
 4ac:	8e bd       	out	0x2e, r24	; 46
   	OCR1B = 128;
 4ae:	80 e8       	ldi	r24, 0x80	; 128
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	99 bd       	out	0x29, r25	; 41
 4b4:	88 bd       	out	0x28, r24	; 40

   	lcd_init(LCD_DISP_ON);
 4b6:	8c e0       	ldi	r24, 0x0C	; 12
 4b8:	0e 94 15 02 	call	0x42a	; 0x42a <lcd_init>
   	lcd_clrscr();
 4bc:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_clrscr>
   	
   	lcd_puts("Choose game");
 4c0:	8e ea       	ldi	r24, 0xAE	; 174
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>
	   
	int totalScore = 0;
 4c8:	c0 e0       	ldi	r28, 0x00	; 0
 4ca:	d0 e0       	ldi	r29, 0x00	; 0
	   
	while(1){
		
		
		
		if(bit_is_clear(PINB, 0)){
 4cc:	b0 99       	sbic	0x16, 0	; 22
 4ce:	05 c0       	rjmp	.+10     	; 0x4da <main+0x3e>
			score = game1();
 4d0:	0e 94 60 00 	call	0xc0	; 0xc0 <game1>
			totalScore = totalScore + score;
 4d4:	c8 0f       	add	r28, r24
 4d6:	d9 1f       	adc	r29, r25
 4d8:	f9 cf       	rjmp	.-14     	; 0x4cc <main+0x30>
		}else if(bit_is_clear(PINB, 1)){
 4da:	b1 99       	sbic	0x16, 1	; 22
 4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <main+0x4c>
			score = game2();
 4de:	0e 94 05 01 	call	0x20a	; 0x20a <game2>
			totalScore = totalScore + score;
 4e2:	c8 0f       	add	r28, r24
 4e4:	d9 1f       	adc	r29, r25
 4e6:	f2 cf       	rjmp	.-28     	; 0x4cc <main+0x30>
		}else if(bit_is_clear(PINB, 2)){
 4e8:	b2 99       	sbic	0x16, 2	; 22
 4ea:	f0 cf       	rjmp	.-32     	; 0x4cc <main+0x30>
			lcd_clrscr();
 4ec:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_clrscr>
			if(totalScore > 0){
 4f0:	1c 16       	cp	r1, r28
 4f2:	1d 06       	cpc	r1, r29
 4f4:	2c f4       	brge	.+10     	; 0x500 <main+0x64>
				lcd_puts("Player 1 wins");
 4f6:	85 ec       	ldi	r24, 0xC5	; 197
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>
 4fe:	0b c0       	rjmp	.+22     	; 0x516 <main+0x7a>
			}else if(totalScore == 0){
 500:	cd 2b       	or	r28, r29
 502:	29 f4       	brne	.+10     	; 0x50e <main+0x72>
				lcd_puts("Draw");
 504:	83 ed       	ldi	r24, 0xD3	; 211
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>
 50c:	04 c0       	rjmp	.+8      	; 0x516 <main+0x7a>
			}else{
				lcd_puts("Player 2 wins");
 50e:	88 ed       	ldi	r24, 0xD8	; 216
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>
 516:	2f ef       	ldi	r18, 0xFF	; 255
 518:	8f e7       	ldi	r24, 0x7F	; 127
 51a:	96 e1       	ldi	r25, 0x16	; 22
 51c:	21 50       	subi	r18, 0x01	; 1
 51e:	80 40       	sbci	r24, 0x00	; 0
 520:	90 40       	sbci	r25, 0x00	; 0
 522:	e1 f7       	brne	.-8      	; 0x51c <main+0x80>
 524:	00 c0       	rjmp	.+0      	; 0x526 <main+0x8a>
 526:	00 00       	nop
			}
			totalScore = 0;
			score = 0;
			_delay_ms(1000);
			lcd_clrscr();
 528:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_clrscr>
			lcd_puts("Choose game");
 52c:	8e ea       	ldi	r24, 0xAE	; 174
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_puts>
			}else if(totalScore == 0){
				lcd_puts("Draw");
			}else{
				lcd_puts("Player 2 wins");
			}
			totalScore = 0;
 534:	c0 e0       	ldi	r28, 0x00	; 0
 536:	d0 e0       	ldi	r29, 0x00	; 0
 538:	c9 cf       	rjmp	.-110    	; 0x4cc <main+0x30>

0000053a <__itoa_ncheck>:
 53a:	bb 27       	eor	r27, r27
 53c:	4a 30       	cpi	r20, 0x0A	; 10
 53e:	31 f4       	brne	.+12     	; 0x54c <__itoa_ncheck+0x12>
 540:	99 23       	and	r25, r25
 542:	22 f4       	brpl	.+8      	; 0x54c <__itoa_ncheck+0x12>
 544:	bd e2       	ldi	r27, 0x2D	; 45
 546:	90 95       	com	r25
 548:	81 95       	neg	r24
 54a:	9f 4f       	sbci	r25, 0xFF	; 255
 54c:	0c 94 a9 02 	jmp	0x552	; 0x552 <__utoa_common>

00000550 <__utoa_ncheck>:
 550:	bb 27       	eor	r27, r27

00000552 <__utoa_common>:
 552:	fb 01       	movw	r30, r22
 554:	55 27       	eor	r21, r21
 556:	aa 27       	eor	r26, r26
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	aa 1f       	adc	r26, r26
 55e:	a4 17       	cp	r26, r20
 560:	10 f0       	brcs	.+4      	; 0x566 <__utoa_common+0x14>
 562:	a4 1b       	sub	r26, r20
 564:	83 95       	inc	r24
 566:	50 51       	subi	r21, 0x10	; 16
 568:	b9 f7       	brne	.-18     	; 0x558 <__utoa_common+0x6>
 56a:	a0 5d       	subi	r26, 0xD0	; 208
 56c:	aa 33       	cpi	r26, 0x3A	; 58
 56e:	08 f0       	brcs	.+2      	; 0x572 <__utoa_common+0x20>
 570:	a9 5d       	subi	r26, 0xD9	; 217
 572:	a1 93       	st	Z+, r26
 574:	00 97       	sbiw	r24, 0x00	; 0
 576:	79 f7       	brne	.-34     	; 0x556 <__utoa_common+0x4>
 578:	b1 11       	cpse	r27, r1
 57a:	b1 93       	st	Z+, r27
 57c:	11 92       	st	Z+, r1
 57e:	cb 01       	movw	r24, r22
 580:	0c 94 c2 02 	jmp	0x584	; 0x584 <strrev>

00000584 <strrev>:
 584:	dc 01       	movw	r26, r24
 586:	fc 01       	movw	r30, r24
 588:	67 2f       	mov	r22, r23
 58a:	71 91       	ld	r23, Z+
 58c:	77 23       	and	r23, r23
 58e:	e1 f7       	brne	.-8      	; 0x588 <strrev+0x4>
 590:	32 97       	sbiw	r30, 0x02	; 2
 592:	04 c0       	rjmp	.+8      	; 0x59c <strrev+0x18>
 594:	7c 91       	ld	r23, X
 596:	6d 93       	st	X+, r22
 598:	70 83       	st	Z, r23
 59a:	62 91       	ld	r22, -Z
 59c:	ae 17       	cp	r26, r30
 59e:	bf 07       	cpc	r27, r31
 5a0:	c8 f3       	brcs	.-14     	; 0x594 <strrev+0x10>
 5a2:	08 95       	ret

000005a4 <_exit>:
 5a4:	f8 94       	cli

000005a6 <__stop_program>:
 5a6:	ff cf       	rjmp	.-2      	; 0x5a6 <__stop_program>
